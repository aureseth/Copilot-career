# Fichier principal de l'application Streamlit

import streamlit as st
import os
from modules import database, generator, interview, analytics, discovery, scheduler
import config
from logger import logger

STATUTS = ["D√©couvert", "Appliqu√©", "Entretien", "Offre", "Rejet√©"]
STATUT_COLORS = {
    "D√©couvert": "#95a5a6",
    "Appliqu√©": "#2980b9",
    "Entretien": "#27ae60",
    "Offre": "#f1c40f",
    "Rejet√©": "#e74c3c",
}


def colored_status(status):
    color = STATUT_COLORS.get(status, "#7f8c8d")
    return f"<span style='background-color:{color};color:white;padding:4px 10px;border-radius:8px'>{status}</span>"


def show_error(msg, help_url=None):
    st.error(msg)
    logger.error(msg)
    if help_url:
        st.markdown(f"[Aide]({help_url})")


def onboarding():
    st.title("üëã Bienvenue sur Co-pilote de Carri√®re !")
    st.markdown(
        """
Bienvenue dans votre assistant IA pour la recherche d'emploi.

Voici comment bien d√©marrer :

1. **Configurer vos cl√©s API** (OpenAI, Notion, Google)
2. **D√©finir vos pr√©f√©rences de recherche** (mots-cl√©s, localisation, sources)
3. **D√©couvrir les fonctionnalit√©s principales**

---
"""
    )
    st.info(
        "Vous pourrez retrouver ce guide √† tout moment dans l'onglet 'üßë‚Äçüíº Guide Utilisateur'."
    )
    if "onboarding_step" not in st.session_state:
        st.session_state["onboarding_step"] = 1
    step = st.session_state["onboarding_step"]
    steps = {
        1: "Configuration des connexions",
        2: "Pr√©f√©rences de recherche",
        3: "D√©couverte des fonctionnalit√©s",
    }
    st.progress(step / len(steps))
    if step == 1:
        st.subheader("1Ô∏è‚É£ Configuration des connexions API")
        services = ["OpenAI", "Notion", "Google"]
        # Statut et messages en session
        for s in services:
            st.session_state.setdefault(f"{s.lower()}_status", "‚ùå")
            st.session_state.setdefault(f"{s.lower()}_msg", "Non test√©")
        # Tableau de statut
        st.table(
            {
                "Service": services,
                "Statut": [st.session_state[f"{s.lower()}_status"] for s in services],
                "Message": [st.session_state[f"{s.lower()}_msg"] for s in services],
            }
        )
        # Affichage/masquage des cl√©s (checkbox hors du form)
        st.session_state.setdefault("show_openai", False)
        st.session_state.setdefault("show_notion", False)
        st.session_state.setdefault("show_google", False)
        show_openai = st.checkbox(
            "Afficher la cl√© OpenAI", value=st.session_state["show_openai"]
        )
        st.session_state["show_openai"] = show_openai
        show_notion = st.checkbox(
            "Afficher la cl√© Notion", value=st.session_state["show_notion"]
        )
        st.session_state["show_notion"] = show_notion
        show_google = st.checkbox(
            "Afficher la cl√© Google", value=st.session_state["show_google"]
        )
        st.session_state["show_google"] = show_google
        with st.form("api_form_onboarding"):
            openai_key = st.text_input(
                "Cl√© API OpenAI",
                value=st.session_state.get("openai_key", ""),
                type="default" if show_openai else "password",
                help="Cl√© API OpenAI. Obtenez-la ici : https://platform.openai.com/api-keys",
            )
            if st.session_state["openai_status"] == "‚ùå":
                st.error(st.session_state["openai_msg"])
                st.markdown("[Aide OpenAI](https://platform.openai.com/api-keys)")
            notion_key = st.text_input(
                "Cl√© API Notion",
                value=st.session_state.get("notion_key", ""),
                type="default" if show_notion else "password",
                help="Cl√© d'int√©gration Notion. Cr√©ez-la ici : https://www.notion.com/my-integrations (puis partagez votre base avec l'int√©gration)",
            )
            if st.session_state["notion_status"] == "‚ùå":
                st.error(st.session_state["notion_msg"])
                st.markdown("[Aide Notion](https://www.notion.com/my-integrations)")
            st.text_input(
                "Google (credentials.json/token.json dans config/)",
                value=st.session_state.get("google_info", ""),
                type="default" if show_google else "password",
                help="G√©n√©rez credentials.json/token.json via Google Cloud Console : https://console.cloud.google.com/apis/credentials. Placez-les dans le dossier config/.",
            )
            if st.session_state["google_status"] == "‚ùå":
                st.error(st.session_state["google_msg"])
                st.markdown(
                    "[Aide Google](https://console.cloud.google.com/apis/credentials)"
                )
            submitted = st.form_submit_button("Tester et enregistrer")
            if submitted:
                # Test OpenAI
                import openai

                try:
                    openai.api_key = openai_key
                    openai.Model.list()
                    st.session_state["openai_status"] = "‚úÖ"
                    st.session_state["openai_msg"] = "Connexion r√©ussie."
                    st.session_state["openai_key"] = openai_key
                except Exception as e:
                    st.session_state["openai_status"] = "‚ùå"
                    st.session_state["openai_msg"] = f"Erreur : {e}"
                # Test Notion
                try:
                    from notion_client import Client

                    notion = Client(auth=notion_key)
                    notion.users.list()
                    st.session_state["notion_status"] = "‚úÖ"
                    st.session_state["notion_msg"] = "Connexion r√©ussie."
                    st.session_state["notion_key"] = notion_key
                except Exception as e:
                    st.session_state["notion_status"] = "‚ùå"
                    st.session_state["notion_msg"] = f"Erreur : {e}"
                # Test Google
                import os

                cred_path = os.path.join("config", "credentials.json")
                token_path = os.path.join("config", "token.json")
                if os.path.exists(cred_path) and os.path.exists(token_path):
                    try:
                        from google.oauth2.credentials import Credentials

                        Credentials.from_authorized_user_file(token_path)
                        st.session_state["google_status"] = "‚úÖ"
                        st.session_state["google_msg"] = (
                            "Fichiers trouv√©s et token lisible."
                        )
                        st.session_state["google_info"] = "OK"
                    except Exception as e:
                        st.session_state["google_status"] = "‚ùå"
                        st.session_state["google_msg"] = (
                            f"Erreur de lecture du token : {e}"
                        )
                else:
                    st.session_state["google_status"] = "‚ùå"
                    st.session_state["google_msg"] = (
                        "credentials.json ou token.json manquant dans config/"
                    )
        st.markdown("---")
        col1, col2 = st.columns([1, 1])
        with col1:
            if all(st.session_state[f"{s.lower()}_status"] == "‚úÖ" for s in services):
                if st.button("Suivant ‚û°Ô∏è"):
                    st.session_state["onboarding_step"] += 1
        with col2:
            if st.button("Sauter cette √©tape", key="skip_connexions"):
                st.session_state["onboarding_step"] += 1
    elif step == 2:
        st.subheader("2Ô∏è‚É£ Pr√©f√©rences de recherche")
        st.write(
            "Dans la barre lat√©rale, renseignez vos mots-cl√©s, localisation et sources d'offres, puis cliquez sur 'Enregistrer les pr√©f√©rences'."
        )
        col1, col2 = st.columns([1, 1])
        with col1:
            if st.button("‚¨ÖÔ∏è Pr√©c√©dent"):
                st.session_state["onboarding_step"] -= 1
        with col2:
            if st.button("Suivant ‚û°Ô∏è"):
                st.session_state["onboarding_step"] += 1
            if st.button("Sauter cette √©tape", key="skip_prefs"):
                st.session_state["onboarding_step"] += 1
    elif step == 3:
        st.subheader("3Ô∏è‚É£ D√©couverte des fonctionnalit√©s")
        st.markdown(
            "- **Tableau de bord** : Suivi de vos candidatures\n- **G√©n√©rateur de CV/LM** : Documents personnalis√©s\n- **Pr√©paration entretien** : Questions IA et briefing\n- **Analyse** : Statistiques et graphiques\n- **Planification** : Entretien dans Google Calendar\n- **Logs** : Suivi technique\n- **Guide utilisateur** : Aide pas √† pas"
        )
        st.markdown("---")
        if st.button("üéâ Lancer l'application üöÄ", type="primary"):
            st.session_state["onboarding_done"] = True
            st.experimental_rerun()
        col1, col2 = st.columns([1, 1])
        with col1:
            if st.button("‚¨ÖÔ∏è Pr√©c√©dent", key="back_features"):
                st.session_state["onboarding_step"] -= 1
        with col2:
            if st.button("Sauter cette √©tape", key="skip_features"):
                st.session_state["onboarding_done"] = True
                st.experimental_rerun()
    st.stop()


def main():
    """Point d'entr√©e principal de l'application Streamlit Co-pilote de Carri√®re."""
    st.set_page_config(page_title="Co-pilote de Carri√®re", layout="wide")
    menu = [
        "Accueil",
        "Configuration & Connexions",
        "Gestion des Statuts",
        "Planifier un entretien",
        "Logs",
        "üßë‚Äçüíº Guide Utilisateur",
    ]
    choix = st.sidebar.selectbox("Navigation", menu)

    if (
        "onboarding_done" not in st.session_state
        or not st.session_state["onboarding_done"]
    ):
        onboarding()

    # --- Page LOGS ---
    if choix == "Logs":
        st.title("üìã Logs de l'application")
        log_path = "logs/app.log"
        if os.path.exists(log_path):
            with open(log_path, "r", encoding="utf-8") as f:
                logs = f.readlines()
            st.text_area("Logs r√©cents", value="".join(logs[-100:]), height=500)
        else:
            st.info("Aucun log disponible pour le moment.")
        return

    if choix == "üßë‚Äçüíº Guide Utilisateur":
        st.title("üßë‚Äçüíº Guide Utilisateur ‚Äì Co-pilote de Carri√®re")
        st.markdown(
            """
## 1. Lancement de l‚Äôapplication

1. Ouvre un terminal dans le dossier du projet.
2. Lance la commande suivante :
   ```bash
   ./launch.sh
   ```
3. Une page web s‚Äôouvre automatiquement (sinon, va sur http://localhost:8501).

---

## 2. Configuration initiale

### a) Cl√©s API et acc√®s
- Va dans le menu lat√©ral, onglet **¬´‚ÄØConfiguration & Connexions‚ÄØ¬ª**.
- Saisis tes cl√©s API :
  - **OpenAI** : [Cr√©er une cl√©](https://platform.openai.com/api-keys)
  - **Notion** : [Cr√©er une int√©gration](https://www.notion.com/my-integrations) et partager ta base
  - **Google** : Place les fichiers `credentials.json` et `token.json` dans le dossier `config/`
- Clique sur **Enregistrer**.
- V√©rifie que chaque service affiche ¬´‚ÄØ‚úÖ Connect√©‚ÄØ¬ª.

---

## 3. Param√©trer tes pr√©f√©rences de recherche

- Dans la barre lat√©rale, section **¬´‚ÄØPr√©f√©rences de recherche‚ÄØ¬ª** :
  - Renseigne tes mots-cl√©s (un par ligne)
  - Indique ta localisation (ou laisse vide pour du remote)
  - Active/d√©sactive les sources d‚Äôoffres (LinkedIn, Indeed, Apec, etc.)
  - Configure les options Gmail si besoin
- Clique sur **Enregistrer les pr√©f√©rences**.

---

## 4. D√©couvrir et ajouter des offres

- Clique sur **¬´‚ÄØüöÄ Lancer une nouvelle recherche d‚Äôoffres‚ÄØ¬ª**.
- Patiente pendant la recherche.
- Un r√©sum√© s‚Äôaffiche : nombre d‚Äôoffres trouv√©es par source, √©ventuelles erreurs.
- Les offres sont ajout√©es automatiquement √† ton tableau de bord Notion.

---

## 5. G√©rer tes candidatures

- Va dans l‚Äôonglet **¬´‚ÄØAccueil ¬ª > ¬´‚ÄØTableau de Bord‚ÄØ¬ª**.
- Visualise toutes tes candidatures, leurs statuts, dates, entreprises.
- Modifie le statut d‚Äôune candidature (D√©couvert, Appliqu√©, Entretien, Offre, Rejet√©) via le menu d√©di√© ou la page ¬´‚ÄØGestion des Statuts‚ÄØ¬ª.

---

## 6. G√©n√©rer un CV/Lettre de motivation personnalis√©s

- Va dans l‚Äôonglet **¬´‚ÄØG√©n√©rer CV/LM‚ÄØ¬ª**.
- T√©l√©verse ton CV au format PDF.
- Colle la description du poste vis√©.
- Clique sur **¬´‚ÄØG√©n√©rer les documents‚ÄØ¬ª**.
- R√©cup√®re ton CV et ta lettre de motivation personnalis√©s.

---

## 7. Pr√©parer un entretien

- Va dans l‚Äôonglet **¬´‚ÄØPr√©parer Entretien‚ÄØ¬ª**.
- S√©lectionne une candidature.
- Clique sur **¬´‚ÄØG√©n√©rer le dossier de pr√©paration‚ÄØ¬ª**.
- D√©couvre :
  - Les questions d‚Äôentretien personnalis√©es
  - Un briefing sur l‚Äôentreprise

---

## 8. Analyser tes performances

- Va dans l‚Äôonglet **¬´‚ÄØAnalyse‚ÄØ¬ª**.
- Consulte :
  - Le nombre total de candidatures
  - Le taux de r√©ponse (entretiens obtenus)
  - Les graphiques de r√©partition des statuts

---

## 9. Planifier un entretien

- Va dans l‚Äôonglet **¬´‚ÄØPlanifier un entretien‚ÄØ¬ª**.
- S√©lectionne une candidature.
- Renseigne la date, l‚Äôheure, le lieu, les participants.
- Clique sur **¬´‚ÄØCr√©er l‚Äô√©v√©nement dans Google Calendar‚ÄØ¬ª**.
- Un message de confirmation s‚Äôaffiche.

---

## 10. Suivre l‚Äôactivit√© et les erreurs

- Va dans l‚Äôonglet **¬´‚ÄØLogs‚ÄØ¬ª** pour consulter les derniers √©v√©nements et erreurs techniques.

---

## 11. FAQ et aide

- Consulte la page **¬´‚ÄØConfiguration & Connexions‚ÄØ¬ª** pour des liens d‚Äôaide et des instructions d√©taill√©es.
- En cas de probl√®me, v√©rifie les logs ou relance l‚Äôapplication.

---

**Bonne recherche d‚Äôemploi avec Co-pilote de Carri√®re‚ÄØ!**
        """
        )
        return

    # --- Page CONFIGURATION ---
    if choix == "Configuration & Connexions":
        st.title("üîë Configuration & Connexions")
        status = check_connections()
        st.subheader("Statut des connexions :")
        for service, ok in status.items():
            st.write(
                f"{service} : {'‚úÖ Connect√©' if ok else '‚ùå Manquant ou incorrect'}"
            )
        st.markdown("---")
        st.subheader("Saisir ou corriger vos cl√©s/API :")
        with st.form("api_form"):
            notion_key = st.text_input(
                "Cl√© API Notion", value=os.getenv("NOTION_API_KEY", "")
            )
            openai_key = st.text_input(
                "Cl√© API OpenAI", value=os.getenv("OPENAI_API_KEY", "")
            )
            submitted = st.form_submit_button("Enregistrer")
            if submitted:
                save_api_keys(notion_key, openai_key)
                st.success(
                    "Cl√©s sauvegard√©es. Veuillez relancer l'application pour prise en compte."
                )
        st.markdown("---")
        st.subheader("‚ùì Comment faire ?")
        st.markdown(
            """
        **Notion** :
        - Cr√©ez une int√©gration sur https://www.notion.com/my-integrations
        - Partagez votre base avec l'int√©gration
        - Copiez la cl√© secr√®te dans le champ ci-dessus

        **OpenAI** :
        - G√©n√©rez une cl√© API sur https://platform.openai.com/api-keys
        - Collez-la dans le champ ci-dessus

        **Google** :
        - Suivez la documentation pour g√©n√©rer credentials.json et token.json
        - Placez-les dans le dossier `config/`

        Red√©marrez l'application apr√®s modification.
        """
        )
        return

    # --- Page GESTION DES STATUTS ---
    if choix == "Gestion des Statuts":
        st.title("üìù Gestion des Statuts de Candidature")
        df = database.get_applications_as_dataframe()
        if not df.empty:
            for idx, row in df.iterrows():
                col1, col2, col3, col4 = st.columns([3, 2, 2, 2])
                with col1:
                    st.write(f"{row['Titre du Poste']} chez {row['Entreprise']}")
                with col2:
                    st.write(f"Date : {row['Date de Candidature']}")
                with col3:
                    new_status = st.selectbox(
                        "Statut",
                        STATUTS,
                        index=(
                            STATUTS.index(row["Statut"])
                            if row["Statut"] in STATUTS
                            else 0
                        ),
                        key=f"statut_gestion_{row['page_id']}",
                    )
                with col4:
                    if st.button("Mettre √† jour", key=f"maj_gestion_{row['page_id']}"):
                        try:
                            database.update_application_status(
                                row["page_id"], new_status
                            )
                            st.success(
                                f"Statut mis √† jour pour {row['Titre du Poste']} !"
                            )
                        except Exception as e:
                            show_error(f"Erreur lors de la mise √† jour : {e}")
        else:
            st.info(
                "Aucune candidature trouv√©e dans Notion ou connexion non configur√©e."
            )
        return

    # --- Page PLANIFIER ENTRETIEN ---
    if choix == "Planifier un entretien":
        st.title("üìÖ Planifier un entretien")
        df = database.get_applications_as_dataframe()
        if not df.empty:
            selected_idx = st.selectbox(
                "Choisissez une candidature",
                options=df.index,
                format_func=lambda i: f"{df.loc[i, 'Titre du Poste']} chez {df.loc[i, 'Entreprise']}",
            )
            selected_job = df.loc[selected_idx]
            with st.form("calendar_form"):
                summary = st.text_input(
                    "Titre de l'√©v√©nement",
                    value=f"Entretien - {selected_job['Titre du Poste']} chez {selected_job['Entreprise']}",
                )
                location = st.text_input("Lieu ou lien visio", value="")
                description = st.text_area("Description", value="")
                date = st.date_input("Date de l'entretien")
                start_time = st.time_input("Heure de d√©but")
                end_time = st.time_input("Heure de fin")
                attendees = st.text_area(
                    "Participants (emails, un par ligne)", value=""
                )
                submitted = st.form_submit_button(
                    "Cr√©er l'√©v√©nement dans Google Calendar"
                )
                if submitted:
                    from datetime import datetime
                    import pytz  # type: ignore[import-untyped]

                    tz = pytz.timezone("Europe/Paris")
                    start_dt = tz.localize(
                        datetime.combine(date, start_time)
                    ).isoformat()
                    end_dt = tz.localize(datetime.combine(date, end_time)).isoformat()
                    emails = [e.strip() for e in attendees.splitlines() if e.strip()]
                    event_details = {
                        "summary": summary,
                        "location": location,
                        "description": description,
                        "start_time": start_dt,
                        "end_time": end_dt,
                        "attendees": emails,
                    }
                    event_id = scheduler.schedule_interview_in_calendar(event_details)
                    if event_id:
                        st.success(f"√âv√©nement cr√©√© avec succ√®s ! ID : {event_id}")
                    else:
                        show_error("Erreur lors de la cr√©ation de l'√©v√©nement.")
        else:
            st.info("Aucune candidature disponible pour planifier un entretien.")
        return

    # --- Page ACCUEIL ---
    if choix == "Accueil":
        st.title("ü§ñ Co-pilote de Carri√®re")
        st.caption("Votre agent IA pour une recherche d'emploi optimis√©e")
        with st.sidebar:
            st.header("‚öôÔ∏è Pr√©f√©rences de recherche")
            prefs = config.load_preferences()
            st.markdown(
                "#### <span style='color:#4F8BF9'>R√©sum√©</span>", unsafe_allow_html=True
            )
            st.markdown(
                f"**Mots-cl√©s** : <span style='color:#2ECC71'>{', '.join(prefs.get('keywords', []))}</span>",
                unsafe_allow_html=True,
            )
            st.markdown(
                f"**Localisation** : <span style='color:#F39C12'>{prefs.get('location', '')}</span>",
                unsafe_allow_html=True,
            )
            sources = prefs.get("sources", {})
            sources_actives = [k for k, v in sources.items() if v]
            st.markdown(
                f"**Sources activ√©es** : <span style='color:#8E44AD'>{', '.join(sources_actives) if sources_actives else 'Aucune'}</span>",
                unsafe_allow_html=True,
            )
            st.markdown("---")
            with st.form("prefs_form"):
                keywords = st.text_area(
                    "Mots-cl√©s (un par ligne)",
                    value="\n".join(prefs.get("keywords", [])),
                    height=100,
                    help="Exemple : Data Scientist, Product Owner, etc.",
                )
                location = st.text_input(
                    "Localisation",
                    value=prefs.get("location", ""),
                    help="Ville ou r√©gion. Laisser vide pour une recherche √† distance.",
                )
                st.markdown("**Sources √† utiliser :**")
                linkedin = st.checkbox("LinkedIn", value=sources.get("linkedin", True))
                indeed = st.checkbox("Indeed", value=sources.get("indeed", False))
                apec = st.checkbox("Apec", value=sources.get("apec", True))
                pole_emploi = st.checkbox(
                    "P√¥le Emploi", value=sources.get("pole_emploi", False)
                )
                gmail_alerts = st.checkbox(
                    "Alertes Gmail", value=sources.get("gmail_alerts", True)
                )
                st.markdown("**Options Gmail :**")
                gmail = prefs.get("gmail", {})
                only_unread = st.checkbox(
                    "Analyser uniquement les emails non lus",
                    value=gmail.get("only_unread", True),
                )
                mark_as_read = st.checkbox(
                    "Marquer les emails comme lus apr√®s analyse",
                    value=gmail.get("mark_as_read", True),
                )
                submitted = st.form_submit_button("Enregistrer les pr√©f√©rences")
                if submitted:
                    new_prefs = {
                        "keywords": [
                            k.strip() for k in keywords.splitlines() if k.strip()
                        ],
                        "location": location,
                        "sources": {
                            "linkedin": linkedin,
                            "indeed": indeed,
                            "apec": apec,
                            "pole_emploi": pole_emploi,
                            "gmail_alerts": gmail_alerts,
                        },
                        "gmail": {
                            "only_unread": only_unread,
                            "mark_as_read": mark_as_read,
                        },
                    }
                    config.save_preferences(new_prefs)
                    st.success("Pr√©f√©rences sauvegard√©es !")
        tab1, tab2, tab3, tab4 = st.tabs(
            [
                "üìä Tableau de Bord",
                "üìÑ G√©n√©rer CV/LM",
                "üéôÔ∏è Pr√©parer Entretien",
                "üìà Analyse",
            ]
        )

        # --- TAB 1 : Dashboard ---
        with tab1:
            st.markdown("## üìä Tableau de Bord")
            st.markdown("---")
            st.header("Suivi des Candidatures (Notion)")
            df = database.get_applications_as_dataframe()
            if not df.empty:
                for idx, row in df.iterrows():
                    st.markdown(
                        f"{row['Titre du Poste']} chez {row['Entreprise']} {colored_status(row['Statut'])}",
                        unsafe_allow_html=True,
                    )
                st.dataframe(df, use_container_width=True)
                st.markdown("---")
                st.subheader("Modifier le statut d'une candidature :")
                for idx, row in df.iterrows():
                    col1, col2, col3 = st.columns([3, 2, 2])
                    with col1:
                        st.write(f"{row['Titre du Poste']} chez {row['Entreprise']}")
                    with col2:
                        new_status = st.selectbox(
                            "Statut",
                            STATUTS,
                            index=(
                                STATUTS.index(row["Statut"])
                                if row["Statut"] in STATUTS
                                else 0
                            ),
                            key=f"statut_{row['page_id']}",
                        )
                    with col3:
                        if st.button("Mettre √† jour", key=f"maj_{row['page_id']}"):
                            try:
                                database.update_application_status(
                                    row["page_id"], new_status
                                )
                                st.success(
                                    f"Statut mis √† jour pour {row['Titre du Poste']} !"
                                )
                            except Exception as e:
                                st.error(f"Erreur lors de la mise √† jour : {e}")
            else:
                st.info(
                    "Aucune candidature trouv√©e dans Notion ou connexion non configur√©e."
                )

        # --- TAB 2 : G√©n√©rateur de CV/LM ---
        with tab2:
            st.header("G√©n√©rateur de Documents de Candidature")
            job_description = st.text_area(
                "Collez la description du poste ici", height=300
            )
            uploaded_file = st.file_uploader("T√©l√©versez votre CV (PDF)", type=["pdf"])
            if st.button("G√©n√©rer les documents"):
                if job_description and uploaded_file:
                    with st.spinner("G√©n√©ration en cours..."):
                        try:
                            temp_path = "data/temp_resume.pdf"
                            with open(temp_path, "wb") as f:
                                f.write(uploaded_file.read())
                            vector_db = generator.create_vector_db_from_resume(
                                temp_path
                            )
                            cv, lm = generator.generate_personalized_documents(
                                vector_db, job_description
                            )
                            st.success("Documents g√©n√©r√©s !")
                            st.subheader("CV Personnalis√©")
                            st.text(cv)
                            st.subheader("Lettre de Motivation")
                            st.text(lm)
                        except ValueError as ve:
                            show_error(f"Erreur lors de la g√©n√©ration : {ve}")
                        except Exception as e:
                            show_error(f"Erreur inattendue : {e}")
                else:
                    st.warning(
                        "Veuillez coller une description de poste et t√©l√©verser un CV au format PDF."
                    )

        # --- TAB 3 : Pr√©paration aux Entretiens ---
        with tab3:
            st.header("Pr√©paration aux Entretiens")
            df = database.get_applications_as_dataframe()
            if not df.empty:
                selected_idx = st.selectbox(
                    "Choisissez une candidature",
                    options=df.index,
                    format_func=lambda i: f"{df.loc[i, 'Titre du Poste']} chez {df.loc[i, 'Entreprise']}",
                )
                selected_job = df.loc[selected_idx]
                if st.button("G√©n√©rer le dossier de pr√©paration"):
                    with st.spinner("Pr√©paration du dossier..."):
                        try:
                            job_details = {
                                "description": selected_job.get(
                                    "Description du Poste",
                                    "Pas de description disponible.",
                                ),
                                "tailored_resume": "Exp√©riences principales du CV √† int√©grer ici (fonctionnalit√© √† enrichir)",
                                "company": selected_job.get("Entreprise", ""),
                            }
                            questions, company_brief = interview.prepare_for_interview(
                                job_details
                            )
                            st.success("Dossier pr√™t !")
                            st.subheader("Questions d'entretien sugg√©r√©es")
                            if isinstance(questions, str):
                                for q in questions.split("\n"):
                                    if q.strip():
                                        st.markdown(f"- {q.strip()}")
                            else:
                                st.write(questions)
                            st.subheader("Briefing sur l'entreprise")
                            st.markdown(company_brief)
                        except Exception as e:
                            show_error(
                                f"Erreur lors de la pr√©paration de l'entretien : {e}"
                            )
            else:
                st.info(
                    "Aucune candidature disponible pour la pr√©paration d'entretien."
                )

        # --- TAB 4 : Analyse des Performances ---
        with tab4:
            st.header("Analyse des Performances")
            metrics = analytics.get_performance_metrics()
            if metrics:
                st.metric("Nombre total de candidatures", metrics["total_applications"])
                st.metric(
                    "Taux de r√©ponse (entretien)", f"{metrics['response_rate']} %"
                )
            else:
                st.info("Aucune donn√©e de performance disponible.")
            visuals = analytics.get_performance_visuals()
            if visuals and "status_distribution" in visuals:
                st.plotly_chart(visuals["status_distribution"])

        # --- ACTIONS RAPIDES ---
        st.header("Actions")
        if st.button("üöÄ Lancer une nouvelle recherche d'offres"):
            with st.spinner("Recherche en cours..."):
                prefs = config.load_preferences()
                try:
                    feedback = discovery.find_and_process_job_offers(prefs)
                    st.success(
                        "Recherche termin√©e et offres ajout√©es au tableau de bord !"
                    )
                    st.markdown("### R√©sultat par source :")
                    for source, result in feedback.items():
                        if isinstance(result, int):
                            st.markdown(
                                f"- **{source}** : {result} offre(s) trouv√©e(s)"
                            )
                        else:
                            st.warning(f"{source} : {result}")
                except Exception as e:
                    show_error(f"Erreur lors de la recherche d'offres : {e}")


# Fonctions utilitaires pour la config et les connexions


def check_connections():
    status = {}
    status["Notion"] = bool(config.NOTION_API_KEY)
    status["OpenAI"] = bool(config.OPENAI_API_KEY)
    status["Google"] = os.path.exists(
        config.GOOGLE_CREDENTIALS_PATH
    ) and os.path.exists(config.GOOGLE_TOKEN_PATH)
    return status


def save_api_keys(notion_key, openai_key):
    env_path = config.CONFIG_DIR / ".env"
    lines = []
    if os.path.exists(env_path):
        with open(env_path, "r", encoding="utf-8") as f:
            lines = f.readlines()
    keys = {"NOTION_API_KEY": notion_key, "OPENAI_API_KEY": openai_key}
    new_lines = []
    for line in lines:
        if any(k in line for k in keys):
            continue
        new_lines.append(line)
    for k, v in keys.items():
        if v:
            new_lines.append(f"{k}={v}\n")
    with open(env_path, "w", encoding="utf-8") as f:
        f.writelines(new_lines)


if __name__ == "__main__":
    main()
